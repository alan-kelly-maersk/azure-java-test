// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rediscache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response to an operation on access policy assignment.
 */
@Fluent
public class RedisCacheAccessPolicyAssignment extends ProxyResource {
    /*
     * Provisioning state of an access policy assignment set
     */
    private AccessPolicyAssignmentProvisioningState provisioningState;

    /*
     * Object Id to assign access policy to
     */
    private String objectId;

    /*
     * User friendly name for object id. Also represents username for token based authentication
     */
    private String objectIdAlias;

    /*
     * The name of the access policy that is being assigned
     */
    private String accessPolicyName;

    /*
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    private String type;

    /*
     * The name of the resource
     */
    private String name;

    /*
     * Fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{
     * resourceType}/{resourceName}
     */
    private String id;

    /**
     * Creates an instance of RedisCacheAccessPolicyAssignment class.
     */
    public RedisCacheAccessPolicyAssignment() {
    }

    /**
     * Get the provisioningState property: Provisioning state of an access policy assignment set.
     * 
     * @return the provisioningState value.
     */
    public AccessPolicyAssignmentProvisioningState getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the objectId property: Object Id to assign access policy to.
     * 
     * @return the objectId value.
     */
    public String getObjectId() {
        return this.objectId;
    }

    /**
     * Set the objectId property: Object Id to assign access policy to.
     * 
     * @param objectId the objectId value to set.
     * @return the RedisCacheAccessPolicyAssignment object itself.
     */
    public RedisCacheAccessPolicyAssignment setObjectId(String objectId) {
        this.objectId = objectId;
        return this;
    }

    /**
     * Get the objectIdAlias property: User friendly name for object id. Also represents username for token based
     * authentication.
     * 
     * @return the objectIdAlias value.
     */
    public String getObjectIdAlias() {
        return this.objectIdAlias;
    }

    /**
     * Set the objectIdAlias property: User friendly name for object id. Also represents username for token based
     * authentication.
     * 
     * @param objectIdAlias the objectIdAlias value to set.
     * @return the RedisCacheAccessPolicyAssignment object itself.
     */
    public RedisCacheAccessPolicyAssignment setObjectIdAlias(String objectIdAlias) {
        this.objectIdAlias = objectIdAlias;
        return this;
    }

    /**
     * Get the accessPolicyName property: The name of the access policy that is being assigned.
     * 
     * @return the accessPolicyName value.
     */
    public String getAccessPolicyName() {
        return this.accessPolicyName;
    }

    /**
     * Set the accessPolicyName property: The name of the access policy that is being assigned.
     * 
     * @param accessPolicyName the accessPolicyName value to set.
     * @return the RedisCacheAccessPolicyAssignment object itself.
     */
    public RedisCacheAccessPolicyAssignment setAccessPolicyName(String accessPolicyName) {
        this.accessPolicyName = accessPolicyName;
        return this;
    }

    /**
     * Get the type property: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     * "Microsoft.Storage/storageAccounts".
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
     * 
     * @return the id value.
     */
    @Override
    public String getId() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (provisioningState != null || objectId != null || objectIdAlias != null || accessPolicyName != null) {
            jsonWriter.writeStartObject("properties");
            jsonWriter.writeStringField("objectId", this.objectId);
            jsonWriter.writeStringField("objectIdAlias", this.objectIdAlias);
            jsonWriter.writeStringField("accessPolicyName", this.accessPolicyName);
            jsonWriter.writeEndObject();
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedisCacheAccessPolicyAssignment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedisCacheAccessPolicyAssignment if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RedisCacheAccessPolicyAssignment.
     */
    public static RedisCacheAccessPolicyAssignment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedisCacheAccessPolicyAssignment deserializedRedisCacheAccessPolicyAssignment
                = new RedisCacheAccessPolicyAssignment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedRedisCacheAccessPolicyAssignment.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedRedisCacheAccessPolicyAssignment.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedRedisCacheAccessPolicyAssignment.type = reader.getString();
                } else if ("properties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("provisioningState".equals(fieldName)) {
                            deserializedRedisCacheAccessPolicyAssignment.provisioningState
                                = AccessPolicyAssignmentProvisioningState.fromString(reader.getString());
                        } else if ("objectId".equals(fieldName)) {
                            deserializedRedisCacheAccessPolicyAssignment.objectId = reader.getString();
                        } else if ("objectIdAlias".equals(fieldName)) {
                            deserializedRedisCacheAccessPolicyAssignment.objectIdAlias = reader.getString();
                        } else if ("accessPolicyName".equals(fieldName)) {
                            deserializedRedisCacheAccessPolicyAssignment.accessPolicyName = reader.getString();
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRedisCacheAccessPolicyAssignment;
        });
    }
}
