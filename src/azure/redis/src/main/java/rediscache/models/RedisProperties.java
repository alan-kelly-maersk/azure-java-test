// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rediscache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Properties of the redis cache.
 */
@Fluent
public final class RedisProperties extends RedisCreateProperties {
    /*
     * Redis instance provisioning status.
     */
    private ProvisioningState provisioningState;

    /*
     * Redis host name.
     */
    private String hostName;

    /*
     * Redis non-SSL port.
     */
    private Integer port;

    /*
     * Redis SSL port.
     */
    private Integer sslPort;

    /*
     * The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
     */
    private RedisAccessKeys accessKeys;

    /*
     * List of the linked servers associated with the cache
     */
    private List<RedisLinkedServer> linkedServers;

    /*
     * List of the Redis instances associated with the cache
     */
    private List<RedisInstanceDetails> instances;

    /*
     * List of private endpoint connection associated with the specified redis cache
     */
    private List<PrivateEndpointConnection> privateEndpointConnections;

    /**
     * Creates an instance of RedisProperties class.
     */
    public RedisProperties() {
    }

    /**
     * Get the provisioningState property: Redis instance provisioning status.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the hostName property: Redis host name.
     * 
     * @return the hostName value.
     */
    public String getHostName() {
        return this.hostName;
    }

    /**
     * Get the port property: Redis non-SSL port.
     * 
     * @return the port value.
     */
    public Integer getPort() {
        return this.port;
    }

    /**
     * Get the sslPort property: Redis SSL port.
     * 
     * @return the sslPort value.
     */
    public Integer getSslPort() {
        return this.sslPort;
    }

    /**
     * Get the accessKeys property: The keys of the Redis cache - not set if this object is not the response to Create
     * or Update redis cache.
     * 
     * @return the accessKeys value.
     */
    public RedisAccessKeys getAccessKeys() {
        return this.accessKeys;
    }

    /**
     * Get the linkedServers property: List of the linked servers associated with the cache.
     * 
     * @return the linkedServers value.
     */
    public List<RedisLinkedServer> getLinkedServers() {
        return this.linkedServers;
    }

    /**
     * Get the instances property: List of the Redis instances associated with the cache.
     * 
     * @return the instances value.
     */
    public List<RedisInstanceDetails> getInstances() {
        return this.instances;
    }

    /**
     * Get the privateEndpointConnections property: List of private endpoint connection associated with the specified
     * redis cache.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnection> getPrivateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisProperties setSku(Sku sku) {
        super.setSku(sku);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisProperties setSubnetId(String subnetId) {
        super.setSubnetId(subnetId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisProperties setStaticIP(String staticIP) {
        super.setStaticIP(staticIP);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisProperties setRedisConfiguration(RedisCommonPropertiesRedisConfiguration redisConfiguration) {
        super.setRedisConfiguration(redisConfiguration);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisProperties setRedisVersion(String redisVersion) {
        super.setRedisVersion(redisVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisProperties setEnableNonSslPort(Boolean enableNonSslPort) {
        super.setEnableNonSslPort(enableNonSslPort);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisProperties setReplicasPerMaster(Integer replicasPerMaster) {
        super.setReplicasPerMaster(replicasPerMaster);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisProperties setReplicasPerPrimary(Integer replicasPerPrimary) {
        super.setReplicasPerPrimary(replicasPerPrimary);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisProperties setTenantSettings(Map<String, String> tenantSettings) {
        super.setTenantSettings(tenantSettings);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisProperties setShardCount(Integer shardCount) {
        super.setShardCount(shardCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisProperties setMinimumTlsVersion(TlsVersion minimumTlsVersion) {
        super.setMinimumTlsVersion(minimumTlsVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisProperties setPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        super.setPublicNetworkAccess(publicNetworkAccess);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisProperties setUpdateChannel(UpdateChannel updateChannel) {
        super.setUpdateChannel(updateChannel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisProperties setDisableAccessKeyAuthentication(Boolean disableAccessKeyAuthentication) {
        super.setDisableAccessKeyAuthentication(disableAccessKeyAuthentication);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisProperties setZonalAllocationPolicy(ZonalAllocationPolicy zonalAllocationPolicy) {
        super.setZonalAllocationPolicy(zonalAllocationPolicy);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sku", getSku());
        jsonWriter.writeJsonField("redisConfiguration", getRedisConfiguration());
        jsonWriter.writeStringField("redisVersion", getRedisVersion());
        jsonWriter.writeBooleanField("enableNonSslPort", isEnableNonSslPort());
        jsonWriter.writeNumberField("replicasPerMaster", getReplicasPerMaster());
        jsonWriter.writeNumberField("replicasPerPrimary", getReplicasPerPrimary());
        jsonWriter.writeMapField("tenantSettings", getTenantSettings(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("shardCount", getShardCount());
        jsonWriter.writeStringField("minimumTlsVersion",
            getMinimumTlsVersion() == null ? null : getMinimumTlsVersion().toString());
        jsonWriter.writeStringField("publicNetworkAccess",
            getPublicNetworkAccess() == null ? null : getPublicNetworkAccess().toString());
        jsonWriter.writeStringField("updateChannel", getUpdateChannel() == null ? null : getUpdateChannel().toString());
        jsonWriter.writeBooleanField("disableAccessKeyAuthentication", isDisableAccessKeyAuthentication());
        jsonWriter.writeStringField("zonalAllocationPolicy",
            getZonalAllocationPolicy() == null ? null : getZonalAllocationPolicy().toString());
        jsonWriter.writeStringField("subnetId", getSubnetId());
        jsonWriter.writeStringField("staticIP", getStaticIP());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedisProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedisProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RedisProperties.
     */
    public static RedisProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedisProperties deserializedRedisProperties = new RedisProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sku".equals(fieldName)) {
                    deserializedRedisProperties.setSku(Sku.fromJson(reader));
                } else if ("redisConfiguration".equals(fieldName)) {
                    deserializedRedisProperties
                        .setRedisConfiguration(RedisCommonPropertiesRedisConfiguration.fromJson(reader));
                } else if ("redisVersion".equals(fieldName)) {
                    deserializedRedisProperties.setRedisVersion(reader.getString());
                } else if ("enableNonSslPort".equals(fieldName)) {
                    deserializedRedisProperties.setEnableNonSslPort(reader.getNullable(JsonReader::getBoolean));
                } else if ("replicasPerMaster".equals(fieldName)) {
                    deserializedRedisProperties.setReplicasPerMaster(reader.getNullable(JsonReader::getInt));
                } else if ("replicasPerPrimary".equals(fieldName)) {
                    deserializedRedisProperties.setReplicasPerPrimary(reader.getNullable(JsonReader::getInt));
                } else if ("tenantSettings".equals(fieldName)) {
                    Map<String, String> tenantSettings = reader.readMap(reader1 -> reader1.getString());
                    deserializedRedisProperties.setTenantSettings(tenantSettings);
                } else if ("shardCount".equals(fieldName)) {
                    deserializedRedisProperties.setShardCount(reader.getNullable(JsonReader::getInt));
                } else if ("minimumTlsVersion".equals(fieldName)) {
                    deserializedRedisProperties.setMinimumTlsVersion(TlsVersion.fromString(reader.getString()));
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedRedisProperties
                        .setPublicNetworkAccess(PublicNetworkAccess.fromString(reader.getString()));
                } else if ("updateChannel".equals(fieldName)) {
                    deserializedRedisProperties.setUpdateChannel(UpdateChannel.fromString(reader.getString()));
                } else if ("disableAccessKeyAuthentication".equals(fieldName)) {
                    deserializedRedisProperties
                        .setDisableAccessKeyAuthentication(reader.getNullable(JsonReader::getBoolean));
                } else if ("zonalAllocationPolicy".equals(fieldName)) {
                    deserializedRedisProperties
                        .setZonalAllocationPolicy(ZonalAllocationPolicy.fromString(reader.getString()));
                } else if ("subnetId".equals(fieldName)) {
                    deserializedRedisProperties.setSubnetId(reader.getString());
                } else if ("staticIP".equals(fieldName)) {
                    deserializedRedisProperties.setStaticIP(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedRedisProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("hostName".equals(fieldName)) {
                    deserializedRedisProperties.hostName = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedRedisProperties.port = reader.getNullable(JsonReader::getInt);
                } else if ("sslPort".equals(fieldName)) {
                    deserializedRedisProperties.sslPort = reader.getNullable(JsonReader::getInt);
                } else if ("accessKeys".equals(fieldName)) {
                    deserializedRedisProperties.accessKeys = RedisAccessKeys.fromJson(reader);
                } else if ("linkedServers".equals(fieldName)) {
                    List<RedisLinkedServer> linkedServers
                        = reader.readArray(reader1 -> RedisLinkedServer.fromJson(reader1));
                    deserializedRedisProperties.linkedServers = linkedServers;
                } else if ("instances".equals(fieldName)) {
                    List<RedisInstanceDetails> instances
                        = reader.readArray(reader1 -> RedisInstanceDetails.fromJson(reader1));
                    deserializedRedisProperties.instances = instances;
                } else if ("privateEndpointConnections".equals(fieldName)) {
                    List<PrivateEndpointConnection> privateEndpointConnections
                        = reader.readArray(reader1 -> PrivateEndpointConnection.fromJson(reader1));
                    deserializedRedisProperties.privateEndpointConnections = privateEndpointConnections;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRedisProperties;
        });
    }
}
