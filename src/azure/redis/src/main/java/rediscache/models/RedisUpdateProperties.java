// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rediscache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Patchable properties of the redis cache.
 */
@Fluent
public final class RedisUpdateProperties extends RedisCommonProperties {
    /*
     * The SKU of the Redis cache to deploy.
     */
    private Sku sku;

    /**
     * Creates an instance of RedisUpdateProperties class.
     */
    public RedisUpdateProperties() {
    }

    /**
     * Get the sku property: The SKU of the Redis cache to deploy.
     * 
     * @return the sku value.
     */
    public Sku getSku() {
        return this.sku;
    }

    /**
     * Set the sku property: The SKU of the Redis cache to deploy.
     * 
     * @param sku the sku value to set.
     * @return the RedisUpdateProperties object itself.
     */
    public RedisUpdateProperties setSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisUpdateProperties setRedisConfiguration(RedisCommonPropertiesRedisConfiguration redisConfiguration) {
        super.setRedisConfiguration(redisConfiguration);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisUpdateProperties setRedisVersion(String redisVersion) {
        super.setRedisVersion(redisVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisUpdateProperties setEnableNonSslPort(Boolean enableNonSslPort) {
        super.setEnableNonSslPort(enableNonSslPort);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisUpdateProperties setReplicasPerMaster(Integer replicasPerMaster) {
        super.setReplicasPerMaster(replicasPerMaster);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisUpdateProperties setReplicasPerPrimary(Integer replicasPerPrimary) {
        super.setReplicasPerPrimary(replicasPerPrimary);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisUpdateProperties setTenantSettings(Map<String, String> tenantSettings) {
        super.setTenantSettings(tenantSettings);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisUpdateProperties setShardCount(Integer shardCount) {
        super.setShardCount(shardCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisUpdateProperties setMinimumTlsVersion(TlsVersion minimumTlsVersion) {
        super.setMinimumTlsVersion(minimumTlsVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisUpdateProperties setPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        super.setPublicNetworkAccess(publicNetworkAccess);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisUpdateProperties setUpdateChannel(UpdateChannel updateChannel) {
        super.setUpdateChannel(updateChannel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisUpdateProperties setDisableAccessKeyAuthentication(Boolean disableAccessKeyAuthentication) {
        super.setDisableAccessKeyAuthentication(disableAccessKeyAuthentication);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisUpdateProperties setZonalAllocationPolicy(ZonalAllocationPolicy zonalAllocationPolicy) {
        super.setZonalAllocationPolicy(zonalAllocationPolicy);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("redisConfiguration", getRedisConfiguration());
        jsonWriter.writeStringField("redisVersion", getRedisVersion());
        jsonWriter.writeBooleanField("enableNonSslPort", isEnableNonSslPort());
        jsonWriter.writeNumberField("replicasPerMaster", getReplicasPerMaster());
        jsonWriter.writeNumberField("replicasPerPrimary", getReplicasPerPrimary());
        jsonWriter.writeMapField("tenantSettings", getTenantSettings(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("shardCount", getShardCount());
        jsonWriter.writeStringField("minimumTlsVersion",
            getMinimumTlsVersion() == null ? null : getMinimumTlsVersion().toString());
        jsonWriter.writeStringField("publicNetworkAccess",
            getPublicNetworkAccess() == null ? null : getPublicNetworkAccess().toString());
        jsonWriter.writeStringField("updateChannel", getUpdateChannel() == null ? null : getUpdateChannel().toString());
        jsonWriter.writeBooleanField("disableAccessKeyAuthentication", isDisableAccessKeyAuthentication());
        jsonWriter.writeStringField("zonalAllocationPolicy",
            getZonalAllocationPolicy() == null ? null : getZonalAllocationPolicy().toString());
        jsonWriter.writeJsonField("sku", this.sku);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedisUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedisUpdateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RedisUpdateProperties.
     */
    public static RedisUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedisUpdateProperties deserializedRedisUpdateProperties = new RedisUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("redisConfiguration".equals(fieldName)) {
                    deserializedRedisUpdateProperties
                        .setRedisConfiguration(RedisCommonPropertiesRedisConfiguration.fromJson(reader));
                } else if ("redisVersion".equals(fieldName)) {
                    deserializedRedisUpdateProperties.setRedisVersion(reader.getString());
                } else if ("enableNonSslPort".equals(fieldName)) {
                    deserializedRedisUpdateProperties.setEnableNonSslPort(reader.getNullable(JsonReader::getBoolean));
                } else if ("replicasPerMaster".equals(fieldName)) {
                    deserializedRedisUpdateProperties.setReplicasPerMaster(reader.getNullable(JsonReader::getInt));
                } else if ("replicasPerPrimary".equals(fieldName)) {
                    deserializedRedisUpdateProperties.setReplicasPerPrimary(reader.getNullable(JsonReader::getInt));
                } else if ("tenantSettings".equals(fieldName)) {
                    Map<String, String> tenantSettings = reader.readMap(reader1 -> reader1.getString());
                    deserializedRedisUpdateProperties.setTenantSettings(tenantSettings);
                } else if ("shardCount".equals(fieldName)) {
                    deserializedRedisUpdateProperties.setShardCount(reader.getNullable(JsonReader::getInt));
                } else if ("minimumTlsVersion".equals(fieldName)) {
                    deserializedRedisUpdateProperties.setMinimumTlsVersion(TlsVersion.fromString(reader.getString()));
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedRedisUpdateProperties
                        .setPublicNetworkAccess(PublicNetworkAccess.fromString(reader.getString()));
                } else if ("updateChannel".equals(fieldName)) {
                    deserializedRedisUpdateProperties.setUpdateChannel(UpdateChannel.fromString(reader.getString()));
                } else if ("disableAccessKeyAuthentication".equals(fieldName)) {
                    deserializedRedisUpdateProperties
                        .setDisableAccessKeyAuthentication(reader.getNullable(JsonReader::getBoolean));
                } else if ("zonalAllocationPolicy".equals(fieldName)) {
                    deserializedRedisUpdateProperties
                        .setZonalAllocationPolicy(ZonalAllocationPolicy.fromString(reader.getString()));
                } else if ("sku".equals(fieldName)) {
                    deserializedRedisUpdateProperties.sku = Sku.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRedisUpdateProperties;
        });
    }
}
