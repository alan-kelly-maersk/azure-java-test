// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rediscache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response to put/get linked server (with properties) for Redis cache.
 */
@Fluent
public class RedisLinkedServerWithProperties extends ProxyResource {
    /*
     * Fully qualified resourceId of the linked redis cache.
     */
    private String linkedRedisCacheId;

    /*
     * Location of the linked redis cache.
     */
    private String linkedRedisCacheLocation;

    /*
     * Role of the linked server.
     */
    private ReplicationRole serverRole;

    /*
     * The unchanging DNS name which will always point to current geo-primary cache among the linked redis caches for
     * seamless Geo Failover experience.
     */
    private String geoReplicatedPrimaryHostName;

    /*
     * The changing DNS name that resolves to the current geo-primary cache among the linked redis caches before or
     * after the Geo Failover.
     */
    private String primaryHostName;

    /*
     * Terminal state of the link between primary and secondary redis cache.
     */
    private String provisioningState;

    /*
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    private String type;

    /*
     * The name of the resource
     */
    private String name;

    /*
     * Fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{
     * resourceType}/{resourceName}
     */
    private String id;

    /**
     * Creates an instance of RedisLinkedServerWithProperties class.
     */
    public RedisLinkedServerWithProperties() {
    }

    /**
     * Get the linkedRedisCacheId property: Fully qualified resourceId of the linked redis cache.
     * 
     * @return the linkedRedisCacheId value.
     */
    public String getLinkedRedisCacheId() {
        return this.linkedRedisCacheId;
    }

    /**
     * Set the linkedRedisCacheId property: Fully qualified resourceId of the linked redis cache.
     * 
     * @param linkedRedisCacheId the linkedRedisCacheId value to set.
     * @return the RedisLinkedServerWithProperties object itself.
     */
    public RedisLinkedServerWithProperties setLinkedRedisCacheId(String linkedRedisCacheId) {
        this.linkedRedisCacheId = linkedRedisCacheId;
        return this;
    }

    /**
     * Get the linkedRedisCacheLocation property: Location of the linked redis cache.
     * 
     * @return the linkedRedisCacheLocation value.
     */
    public String getLinkedRedisCacheLocation() {
        return this.linkedRedisCacheLocation;
    }

    /**
     * Set the linkedRedisCacheLocation property: Location of the linked redis cache.
     * 
     * @param linkedRedisCacheLocation the linkedRedisCacheLocation value to set.
     * @return the RedisLinkedServerWithProperties object itself.
     */
    public RedisLinkedServerWithProperties setLinkedRedisCacheLocation(String linkedRedisCacheLocation) {
        this.linkedRedisCacheLocation = linkedRedisCacheLocation;
        return this;
    }

    /**
     * Get the serverRole property: Role of the linked server.
     * 
     * @return the serverRole value.
     */
    public ReplicationRole getServerRole() {
        return this.serverRole;
    }

    /**
     * Set the serverRole property: Role of the linked server.
     * 
     * @param serverRole the serverRole value to set.
     * @return the RedisLinkedServerWithProperties object itself.
     */
    public RedisLinkedServerWithProperties setServerRole(ReplicationRole serverRole) {
        this.serverRole = serverRole;
        return this;
    }

    /**
     * Get the geoReplicatedPrimaryHostName property: The unchanging DNS name which will always point to current
     * geo-primary cache among the linked redis caches for seamless Geo Failover experience.
     * 
     * @return the geoReplicatedPrimaryHostName value.
     */
    public String getGeoReplicatedPrimaryHostName() {
        return this.geoReplicatedPrimaryHostName;
    }

    /**
     * Get the primaryHostName property: The changing DNS name that resolves to the current geo-primary cache among the
     * linked redis caches before or after the Geo Failover.
     * 
     * @return the primaryHostName value.
     */
    public String getPrimaryHostName() {
        return this.primaryHostName;
    }

    /**
     * Get the provisioningState property: Terminal state of the link between primary and secondary redis cache.
     * 
     * @return the provisioningState value.
     */
    public String getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the type property: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     * "Microsoft.Storage/storageAccounts".
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
     * 
     * @return the id value.
     */
    @Override
    public String getId() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (linkedRedisCacheId != null
            || linkedRedisCacheLocation != null
            || serverRole != null
            || geoReplicatedPrimaryHostName != null
            || primaryHostName != null
            || provisioningState != null) {
            jsonWriter.writeStartObject("properties");
            jsonWriter.writeStringField("linkedRedisCacheId", this.linkedRedisCacheId);
            jsonWriter.writeStringField("linkedRedisCacheLocation", this.linkedRedisCacheLocation);
            jsonWriter.writeStringField("serverRole", this.serverRole == null ? null : this.serverRole.toString());
            jsonWriter.writeEndObject();
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedisLinkedServerWithProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedisLinkedServerWithProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RedisLinkedServerWithProperties.
     */
    public static RedisLinkedServerWithProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedisLinkedServerWithProperties deserializedRedisLinkedServerWithProperties
                = new RedisLinkedServerWithProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedRedisLinkedServerWithProperties.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedRedisLinkedServerWithProperties.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedRedisLinkedServerWithProperties.type = reader.getString();
                } else if ("properties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("linkedRedisCacheId".equals(fieldName)) {
                            deserializedRedisLinkedServerWithProperties.linkedRedisCacheId = reader.getString();
                        } else if ("linkedRedisCacheLocation".equals(fieldName)) {
                            deserializedRedisLinkedServerWithProperties.linkedRedisCacheLocation = reader.getString();
                        } else if ("serverRole".equals(fieldName)) {
                            deserializedRedisLinkedServerWithProperties.serverRole
                                = ReplicationRole.fromString(reader.getString());
                        } else if ("geoReplicatedPrimaryHostName".equals(fieldName)) {
                            deserializedRedisLinkedServerWithProperties.geoReplicatedPrimaryHostName
                                = reader.getString();
                        } else if ("primaryHostName".equals(fieldName)) {
                            deserializedRedisLinkedServerWithProperties.primaryHostName = reader.getString();
                        } else if ("provisioningState".equals(fieldName)) {
                            deserializedRedisLinkedServerWithProperties.provisioningState = reader.getString();
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRedisLinkedServerWithProperties;
        });
    }
}
