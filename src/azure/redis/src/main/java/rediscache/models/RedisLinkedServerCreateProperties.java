// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rediscache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Create properties for a linked server.
 */
@Fluent
public class RedisLinkedServerCreateProperties implements JsonSerializable<RedisLinkedServerCreateProperties> {
    /*
     * Fully qualified resourceId of the linked redis cache.
     */
    private String linkedRedisCacheId;

    /*
     * Location of the linked redis cache.
     */
    private String linkedRedisCacheLocation;

    /*
     * Role of the linked server.
     */
    private ReplicationRole serverRole;

    /*
     * The unchanging DNS name which will always point to current geo-primary cache among the linked redis caches for
     * seamless Geo Failover experience.
     */
    private String geoReplicatedPrimaryHostName;

    /*
     * The changing DNS name that resolves to the current geo-primary cache among the linked redis caches before or
     * after the Geo Failover.
     */
    private String primaryHostName;

    /**
     * Creates an instance of RedisLinkedServerCreateProperties class.
     */
    public RedisLinkedServerCreateProperties() {
    }

    /**
     * Get the linkedRedisCacheId property: Fully qualified resourceId of the linked redis cache.
     * 
     * @return the linkedRedisCacheId value.
     */
    public String getLinkedRedisCacheId() {
        return this.linkedRedisCacheId;
    }

    /**
     * Set the linkedRedisCacheId property: Fully qualified resourceId of the linked redis cache.
     * 
     * @param linkedRedisCacheId the linkedRedisCacheId value to set.
     * @return the RedisLinkedServerCreateProperties object itself.
     */
    public RedisLinkedServerCreateProperties setLinkedRedisCacheId(String linkedRedisCacheId) {
        this.linkedRedisCacheId = linkedRedisCacheId;
        return this;
    }

    /**
     * Get the linkedRedisCacheLocation property: Location of the linked redis cache.
     * 
     * @return the linkedRedisCacheLocation value.
     */
    public String getLinkedRedisCacheLocation() {
        return this.linkedRedisCacheLocation;
    }

    /**
     * Set the linkedRedisCacheLocation property: Location of the linked redis cache.
     * 
     * @param linkedRedisCacheLocation the linkedRedisCacheLocation value to set.
     * @return the RedisLinkedServerCreateProperties object itself.
     */
    public RedisLinkedServerCreateProperties setLinkedRedisCacheLocation(String linkedRedisCacheLocation) {
        this.linkedRedisCacheLocation = linkedRedisCacheLocation;
        return this;
    }

    /**
     * Get the serverRole property: Role of the linked server.
     * 
     * @return the serverRole value.
     */
    public ReplicationRole getServerRole() {
        return this.serverRole;
    }

    /**
     * Set the serverRole property: Role of the linked server.
     * 
     * @param serverRole the serverRole value to set.
     * @return the RedisLinkedServerCreateProperties object itself.
     */
    public RedisLinkedServerCreateProperties setServerRole(ReplicationRole serverRole) {
        this.serverRole = serverRole;
        return this;
    }

    /**
     * Get the geoReplicatedPrimaryHostName property: The unchanging DNS name which will always point to current
     * geo-primary cache among the linked redis caches for seamless Geo Failover experience.
     * 
     * @return the geoReplicatedPrimaryHostName value.
     */
    public String getGeoReplicatedPrimaryHostName() {
        return this.geoReplicatedPrimaryHostName;
    }

    /**
     * Set the geoReplicatedPrimaryHostName property: The unchanging DNS name which will always point to current
     * geo-primary cache among the linked redis caches for seamless Geo Failover experience.
     * 
     * @param geoReplicatedPrimaryHostName the geoReplicatedPrimaryHostName value to set.
     * @return the RedisLinkedServerCreateProperties object itself.
     */
    RedisLinkedServerCreateProperties setGeoReplicatedPrimaryHostName(String geoReplicatedPrimaryHostName) {
        this.geoReplicatedPrimaryHostName = geoReplicatedPrimaryHostName;
        return this;
    }

    /**
     * Get the primaryHostName property: The changing DNS name that resolves to the current geo-primary cache among the
     * linked redis caches before or after the Geo Failover.
     * 
     * @return the primaryHostName value.
     */
    public String getPrimaryHostName() {
        return this.primaryHostName;
    }

    /**
     * Set the primaryHostName property: The changing DNS name that resolves to the current geo-primary cache among the
     * linked redis caches before or after the Geo Failover.
     * 
     * @param primaryHostName the primaryHostName value to set.
     * @return the RedisLinkedServerCreateProperties object itself.
     */
    RedisLinkedServerCreateProperties setPrimaryHostName(String primaryHostName) {
        this.primaryHostName = primaryHostName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("linkedRedisCacheId", this.linkedRedisCacheId);
        jsonWriter.writeStringField("linkedRedisCacheLocation", this.linkedRedisCacheLocation);
        jsonWriter.writeStringField("serverRole", this.serverRole == null ? null : this.serverRole.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedisLinkedServerCreateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedisLinkedServerCreateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RedisLinkedServerCreateProperties.
     */
    public static RedisLinkedServerCreateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedisLinkedServerCreateProperties deserializedRedisLinkedServerCreateProperties
                = new RedisLinkedServerCreateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("linkedRedisCacheId".equals(fieldName)) {
                    deserializedRedisLinkedServerCreateProperties.linkedRedisCacheId = reader.getString();
                } else if ("linkedRedisCacheLocation".equals(fieldName)) {
                    deserializedRedisLinkedServerCreateProperties.linkedRedisCacheLocation = reader.getString();
                } else if ("serverRole".equals(fieldName)) {
                    deserializedRedisLinkedServerCreateProperties.serverRole
                        = ReplicationRole.fromString(reader.getString());
                } else if ("geoReplicatedPrimaryHostName".equals(fieldName)) {
                    deserializedRedisLinkedServerCreateProperties.geoReplicatedPrimaryHostName = reader.getString();
                } else if ("primaryHostName".equals(fieldName)) {
                    deserializedRedisLinkedServerCreateProperties.primaryHostName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRedisLinkedServerCreateProperties;
        });
    }
}
