// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rediscache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Parameters for Redis export operation.
 */
@Fluent
public final class ExportRDBParameters implements JsonSerializable<ExportRDBParameters> {
    /*
     * File format.
     */
    private String format;

    /*
     * Prefix to use for exported files.
     */
    private String prefix;

    /*
     * Container name to export to.
     */
    private String container;

    /*
     * Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity,
     * default value is SAS
     */
    private String preferredDataArchiveAuthMethod;

    /*
     * Subscription id of the storage container for data to be exported using ManagedIdentity.
     */
    private String storageSubscriptionId;

    /**
     * Creates an instance of ExportRDBParameters class.
     */
    public ExportRDBParameters() {
    }

    /**
     * Get the format property: File format.
     * 
     * @return the format value.
     */
    public String getFormat() {
        return this.format;
    }

    /**
     * Set the format property: File format.
     * 
     * @param format the format value to set.
     * @return the ExportRDBParameters object itself.
     */
    public ExportRDBParameters setFormat(String format) {
        this.format = format;
        return this;
    }

    /**
     * Get the prefix property: Prefix to use for exported files.
     * 
     * @return the prefix value.
     */
    public String getPrefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: Prefix to use for exported files.
     * 
     * @param prefix the prefix value to set.
     * @return the ExportRDBParameters object itself.
     */
    public ExportRDBParameters setPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the container property: Container name to export to.
     * 
     * @return the container value.
     */
    public String getContainer() {
        return this.container;
    }

    /**
     * Set the container property: Container name to export to.
     * 
     * @param container the container value to set.
     * @return the ExportRDBParameters object itself.
     */
    public ExportRDBParameters setContainer(String container) {
        this.container = container;
        return this;
    }

    /**
     * Get the preferredDataArchiveAuthMethod property: Preferred auth method to communicate to storage account used for
     * data archive, specify SAS or ManagedIdentity, default value is SAS.
     * 
     * @return the preferredDataArchiveAuthMethod value.
     */
    public String getPreferredDataArchiveAuthMethod() {
        return this.preferredDataArchiveAuthMethod;
    }

    /**
     * Set the preferredDataArchiveAuthMethod property: Preferred auth method to communicate to storage account used for
     * data archive, specify SAS or ManagedIdentity, default value is SAS.
     * 
     * @param preferredDataArchiveAuthMethod the preferredDataArchiveAuthMethod value to set.
     * @return the ExportRDBParameters object itself.
     */
    public ExportRDBParameters setPreferredDataArchiveAuthMethod(String preferredDataArchiveAuthMethod) {
        this.preferredDataArchiveAuthMethod = preferredDataArchiveAuthMethod;
        return this;
    }

    /**
     * Get the storageSubscriptionId property: Subscription id of the storage container for data to be exported using
     * ManagedIdentity.
     * 
     * @return the storageSubscriptionId value.
     */
    public String getStorageSubscriptionId() {
        return this.storageSubscriptionId;
    }

    /**
     * Set the storageSubscriptionId property: Subscription id of the storage container for data to be exported using
     * ManagedIdentity.
     * 
     * @param storageSubscriptionId the storageSubscriptionId value to set.
     * @return the ExportRDBParameters object itself.
     */
    public ExportRDBParameters setStorageSubscriptionId(String storageSubscriptionId) {
        this.storageSubscriptionId = storageSubscriptionId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("prefix", this.prefix);
        jsonWriter.writeStringField("container", this.container);
        jsonWriter.writeStringField("format", this.format);
        jsonWriter.writeStringField("preferred-data-archive-auth-method", this.preferredDataArchiveAuthMethod);
        jsonWriter.writeStringField("storage-subscription-id", this.storageSubscriptionId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExportRDBParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExportRDBParameters if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExportRDBParameters.
     */
    public static ExportRDBParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExportRDBParameters deserializedExportRDBParameters = new ExportRDBParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("prefix".equals(fieldName)) {
                    deserializedExportRDBParameters.prefix = reader.getString();
                } else if ("container".equals(fieldName)) {
                    deserializedExportRDBParameters.container = reader.getString();
                } else if ("format".equals(fieldName)) {
                    deserializedExportRDBParameters.format = reader.getString();
                } else if ("preferred-data-archive-auth-method".equals(fieldName)) {
                    deserializedExportRDBParameters.preferredDataArchiveAuthMethod = reader.getString();
                } else if ("storage-subscription-id".equals(fieldName)) {
                    deserializedExportRDBParameters.storageSubscriptionId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExportRDBParameters;
        });
    }
}
