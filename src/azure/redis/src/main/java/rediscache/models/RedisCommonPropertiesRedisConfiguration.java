// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rediscache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * All Redis Settings. Few possible keys:
 * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,
 * maxmemory-policy,notify-keyspace-events, aof-backup-enabled, aof-storage-connection-string-0,
 * aof-storage-connection-string-1 etc.
 */
@Fluent
public final class RedisCommonPropertiesRedisConfiguration
    implements JsonSerializable<RedisCommonPropertiesRedisConfiguration> {
    /*
     * Specifies whether the rdb backup is enabled
     */
    private String rdbBackupEnabled;

    /*
     * Specifies the frequency for creating rdb backup in minutes. Valid values: (15, 30, 60, 360, 720, 1440)
     */
    private String rdbBackupFrequency;

    /*
     * Specifies the maximum number of snapshots for rdb backup
     */
    private String rdbBackupMaxSnapshotCount;

    /*
     * The storage account connection string for storing rdb file
     */
    private String rdbStorageConnectionString;

    /*
     * Specifies whether the aof backup is enabled
     */
    private String aofBackupEnabled;

    /*
     * First storage account connection string
     */
    private String aofStorageConnectionString0;

    /*
     * Second storage account connection string
     */
    private String aofStorageConnectionString1;

    /*
     * Value in megabytes reserved for fragmentation per shard
     */
    private String maxfragmentationmemoryReserved;

    /*
     * The eviction strategy used when your data won't fit within its memory limit.
     */
    private String maxmemoryPolicy;

    /*
     * Value in megabytes reserved for non-cache usage per shard e.g. failover.
     */
    private String maxmemoryReserved;

    /*
     * Value in megabytes reserved for non-cache usage per shard e.g. failover.
     */
    private String maxmemoryDelta;

    /*
     * The max clients config
     */
    private String maxclients;

    /*
     * The keyspace events which should be monitored.
     */
    private String notifyKeyspaceEvents;

    /*
     * Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity,
     * default value is SAS
     */
    private String preferredDataArchiveAuthMethod;

    /*
     * Preferred auth method to communicate to storage account used for data persistence, specify SAS or
     * ManagedIdentity, default value is SAS
     */
    private String preferredDataPersistenceAuthMethod;

    /*
     * Zonal Configuration
     */
    private String zonalConfiguration;

    /*
     * Specifies whether the authentication is disabled. Setting this property is highly discouraged from security point
     * of view.
     */
    private String authnotrequired;

    /*
     * SubscriptionId of the storage account for persistence (aof/rdb) using ManagedIdentity.
     */
    private String storageSubscriptionId;

    /*
     * Specifies whether AAD based authentication has been enabled or disabled for the cache
     */
    private String aadEnabled;

    /*
     * All Redis Settings. Few possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,
     * maxmemory-policy,notify-keyspace-events, aof-backup-enabled, aof-storage-connection-string-0,
     * aof-storage-connection-string-1 etc.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of RedisCommonPropertiesRedisConfiguration class.
     */
    public RedisCommonPropertiesRedisConfiguration() {
    }

    /**
     * Get the rdbBackupEnabled property: Specifies whether the rdb backup is enabled.
     * 
     * @return the rdbBackupEnabled value.
     */
    public String getRdbBackupEnabled() {
        return this.rdbBackupEnabled;
    }

    /**
     * Set the rdbBackupEnabled property: Specifies whether the rdb backup is enabled.
     * 
     * @param rdbBackupEnabled the rdbBackupEnabled value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration setRdbBackupEnabled(String rdbBackupEnabled) {
        this.rdbBackupEnabled = rdbBackupEnabled;
        return this;
    }

    /**
     * Get the rdbBackupFrequency property: Specifies the frequency for creating rdb backup in minutes. Valid values:
     * (15, 30, 60, 360, 720, 1440).
     * 
     * @return the rdbBackupFrequency value.
     */
    public String getRdbBackupFrequency() {
        return this.rdbBackupFrequency;
    }

    /**
     * Set the rdbBackupFrequency property: Specifies the frequency for creating rdb backup in minutes. Valid values:
     * (15, 30, 60, 360, 720, 1440).
     * 
     * @param rdbBackupFrequency the rdbBackupFrequency value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration setRdbBackupFrequency(String rdbBackupFrequency) {
        this.rdbBackupFrequency = rdbBackupFrequency;
        return this;
    }

    /**
     * Get the rdbBackupMaxSnapshotCount property: Specifies the maximum number of snapshots for rdb backup.
     * 
     * @return the rdbBackupMaxSnapshotCount value.
     */
    public String getRdbBackupMaxSnapshotCount() {
        return this.rdbBackupMaxSnapshotCount;
    }

    /**
     * Set the rdbBackupMaxSnapshotCount property: Specifies the maximum number of snapshots for rdb backup.
     * 
     * @param rdbBackupMaxSnapshotCount the rdbBackupMaxSnapshotCount value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration setRdbBackupMaxSnapshotCount(String rdbBackupMaxSnapshotCount) {
        this.rdbBackupMaxSnapshotCount = rdbBackupMaxSnapshotCount;
        return this;
    }

    /**
     * Get the rdbStorageConnectionString property: The storage account connection string for storing rdb file.
     * 
     * @return the rdbStorageConnectionString value.
     */
    public String getRdbStorageConnectionString() {
        return this.rdbStorageConnectionString;
    }

    /**
     * Set the rdbStorageConnectionString property: The storage account connection string for storing rdb file.
     * 
     * @param rdbStorageConnectionString the rdbStorageConnectionString value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration setRdbStorageConnectionString(String rdbStorageConnectionString) {
        this.rdbStorageConnectionString = rdbStorageConnectionString;
        return this;
    }

    /**
     * Get the aofBackupEnabled property: Specifies whether the aof backup is enabled.
     * 
     * @return the aofBackupEnabled value.
     */
    public String getAofBackupEnabled() {
        return this.aofBackupEnabled;
    }

    /**
     * Set the aofBackupEnabled property: Specifies whether the aof backup is enabled.
     * 
     * @param aofBackupEnabled the aofBackupEnabled value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration setAofBackupEnabled(String aofBackupEnabled) {
        this.aofBackupEnabled = aofBackupEnabled;
        return this;
    }

    /**
     * Get the aofStorageConnectionString0 property: First storage account connection string.
     * 
     * @return the aofStorageConnectionString0 value.
     */
    public String getAofStorageConnectionString0() {
        return this.aofStorageConnectionString0;
    }

    /**
     * Set the aofStorageConnectionString0 property: First storage account connection string.
     * 
     * @param aofStorageConnectionString0 the aofStorageConnectionString0 value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration setAofStorageConnectionString0(String aofStorageConnectionString0) {
        this.aofStorageConnectionString0 = aofStorageConnectionString0;
        return this;
    }

    /**
     * Get the aofStorageConnectionString1 property: Second storage account connection string.
     * 
     * @return the aofStorageConnectionString1 value.
     */
    public String getAofStorageConnectionString1() {
        return this.aofStorageConnectionString1;
    }

    /**
     * Set the aofStorageConnectionString1 property: Second storage account connection string.
     * 
     * @param aofStorageConnectionString1 the aofStorageConnectionString1 value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration setAofStorageConnectionString1(String aofStorageConnectionString1) {
        this.aofStorageConnectionString1 = aofStorageConnectionString1;
        return this;
    }

    /**
     * Get the maxfragmentationmemoryReserved property: Value in megabytes reserved for fragmentation per shard.
     * 
     * @return the maxfragmentationmemoryReserved value.
     */
    public String getMaxfragmentationmemoryReserved() {
        return this.maxfragmentationmemoryReserved;
    }

    /**
     * Set the maxfragmentationmemoryReserved property: Value in megabytes reserved for fragmentation per shard.
     * 
     * @param maxfragmentationmemoryReserved the maxfragmentationmemoryReserved value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration
        setMaxfragmentationmemoryReserved(String maxfragmentationmemoryReserved) {
        this.maxfragmentationmemoryReserved = maxfragmentationmemoryReserved;
        return this;
    }

    /**
     * Get the maxmemoryPolicy property: The eviction strategy used when your data won't fit within its memory limit.
     * 
     * @return the maxmemoryPolicy value.
     */
    public String getMaxmemoryPolicy() {
        return this.maxmemoryPolicy;
    }

    /**
     * Set the maxmemoryPolicy property: The eviction strategy used when your data won't fit within its memory limit.
     * 
     * @param maxmemoryPolicy the maxmemoryPolicy value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration setMaxmemoryPolicy(String maxmemoryPolicy) {
        this.maxmemoryPolicy = maxmemoryPolicy;
        return this;
    }

    /**
     * Get the maxmemoryReserved property: Value in megabytes reserved for non-cache usage per shard e.g. failover.
     * 
     * @return the maxmemoryReserved value.
     */
    public String getMaxmemoryReserved() {
        return this.maxmemoryReserved;
    }

    /**
     * Set the maxmemoryReserved property: Value in megabytes reserved for non-cache usage per shard e.g. failover.
     * 
     * @param maxmemoryReserved the maxmemoryReserved value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration setMaxmemoryReserved(String maxmemoryReserved) {
        this.maxmemoryReserved = maxmemoryReserved;
        return this;
    }

    /**
     * Get the maxmemoryDelta property: Value in megabytes reserved for non-cache usage per shard e.g. failover.
     * 
     * @return the maxmemoryDelta value.
     */
    public String getMaxmemoryDelta() {
        return this.maxmemoryDelta;
    }

    /**
     * Set the maxmemoryDelta property: Value in megabytes reserved for non-cache usage per shard e.g. failover.
     * 
     * @param maxmemoryDelta the maxmemoryDelta value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration setMaxmemoryDelta(String maxmemoryDelta) {
        this.maxmemoryDelta = maxmemoryDelta;
        return this;
    }

    /**
     * Get the maxclients property: The max clients config.
     * 
     * @return the maxclients value.
     */
    public String getMaxclients() {
        return this.maxclients;
    }

    /**
     * Get the notifyKeyspaceEvents property: The keyspace events which should be monitored.
     * 
     * @return the notifyKeyspaceEvents value.
     */
    public String getNotifyKeyspaceEvents() {
        return this.notifyKeyspaceEvents;
    }

    /**
     * Set the notifyKeyspaceEvents property: The keyspace events which should be monitored.
     * 
     * @param notifyKeyspaceEvents the notifyKeyspaceEvents value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration setNotifyKeyspaceEvents(String notifyKeyspaceEvents) {
        this.notifyKeyspaceEvents = notifyKeyspaceEvents;
        return this;
    }

    /**
     * Get the preferredDataArchiveAuthMethod property: Preferred auth method to communicate to storage account used for
     * data archive, specify SAS or ManagedIdentity, default value is SAS.
     * 
     * @return the preferredDataArchiveAuthMethod value.
     */
    public String getPreferredDataArchiveAuthMethod() {
        return this.preferredDataArchiveAuthMethod;
    }

    /**
     * Get the preferredDataPersistenceAuthMethod property: Preferred auth method to communicate to storage account used
     * for data persistence, specify SAS or ManagedIdentity, default value is SAS.
     * 
     * @return the preferredDataPersistenceAuthMethod value.
     */
    public String getPreferredDataPersistenceAuthMethod() {
        return this.preferredDataPersistenceAuthMethod;
    }

    /**
     * Set the preferredDataPersistenceAuthMethod property: Preferred auth method to communicate to storage account used
     * for data persistence, specify SAS or ManagedIdentity, default value is SAS.
     * 
     * @param preferredDataPersistenceAuthMethod the preferredDataPersistenceAuthMethod value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration
        setPreferredDataPersistenceAuthMethod(String preferredDataPersistenceAuthMethod) {
        this.preferredDataPersistenceAuthMethod = preferredDataPersistenceAuthMethod;
        return this;
    }

    /**
     * Get the zonalConfiguration property: Zonal Configuration.
     * 
     * @return the zonalConfiguration value.
     */
    public String getZonalConfiguration() {
        return this.zonalConfiguration;
    }

    /**
     * Get the authnotrequired property: Specifies whether the authentication is disabled. Setting this property is
     * highly discouraged from security point of view.
     * 
     * @return the authnotrequired value.
     */
    public String getAuthnotrequired() {
        return this.authnotrequired;
    }

    /**
     * Set the authnotrequired property: Specifies whether the authentication is disabled. Setting this property is
     * highly discouraged from security point of view.
     * 
     * @param authnotrequired the authnotrequired value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration setAuthnotrequired(String authnotrequired) {
        this.authnotrequired = authnotrequired;
        return this;
    }

    /**
     * Get the storageSubscriptionId property: SubscriptionId of the storage account for persistence (aof/rdb) using
     * ManagedIdentity.
     * 
     * @return the storageSubscriptionId value.
     */
    public String getStorageSubscriptionId() {
        return this.storageSubscriptionId;
    }

    /**
     * Set the storageSubscriptionId property: SubscriptionId of the storage account for persistence (aof/rdb) using
     * ManagedIdentity.
     * 
     * @param storageSubscriptionId the storageSubscriptionId value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration setStorageSubscriptionId(String storageSubscriptionId) {
        this.storageSubscriptionId = storageSubscriptionId;
        return this;
    }

    /**
     * Get the aadEnabled property: Specifies whether AAD based authentication has been enabled or disabled for the
     * cache.
     * 
     * @return the aadEnabled value.
     */
    public String getAadEnabled() {
        return this.aadEnabled;
    }

    /**
     * Set the aadEnabled property: Specifies whether AAD based authentication has been enabled or disabled for the
     * cache.
     * 
     * @param aadEnabled the aadEnabled value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration setAadEnabled(String aadEnabled) {
        this.aadEnabled = aadEnabled;
        return this;
    }

    /**
     * Get the additionalProperties property: All Redis Settings. Few possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,
     * maxmemory-policy,notify-keyspace-events, aof-backup-enabled, aof-storage-connection-string-0,
     * aof-storage-connection-string-1 etc.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: All Redis Settings. Few possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,
     * maxmemory-policy,notify-keyspace-events, aof-backup-enabled, aof-storage-connection-string-0,
     * aof-storage-connection-string-1 etc.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration setAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("rdb-backup-enabled", this.rdbBackupEnabled);
        jsonWriter.writeStringField("rdb-backup-frequency", this.rdbBackupFrequency);
        jsonWriter.writeStringField("rdb-backup-max-snapshot-count", this.rdbBackupMaxSnapshotCount);
        jsonWriter.writeStringField("rdb-storage-connection-string", this.rdbStorageConnectionString);
        jsonWriter.writeStringField("aof-backup-enabled", this.aofBackupEnabled);
        jsonWriter.writeStringField("aof-storage-connection-string-0", this.aofStorageConnectionString0);
        jsonWriter.writeStringField("aof-storage-connection-string-1", this.aofStorageConnectionString1);
        jsonWriter.writeStringField("maxfragmentationmemory-reserved", this.maxfragmentationmemoryReserved);
        jsonWriter.writeStringField("maxmemory-policy", this.maxmemoryPolicy);
        jsonWriter.writeStringField("maxmemory-reserved", this.maxmemoryReserved);
        jsonWriter.writeStringField("maxmemory-delta", this.maxmemoryDelta);
        jsonWriter.writeStringField("notify-keyspace-events", this.notifyKeyspaceEvents);
        jsonWriter.writeStringField("preferred-data-persistence-auth-method", this.preferredDataPersistenceAuthMethod);
        jsonWriter.writeStringField("authnotrequired", this.authnotrequired);
        jsonWriter.writeStringField("storage-subscription-id", this.storageSubscriptionId);
        jsonWriter.writeStringField("aad-enabled", this.aadEnabled);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedisCommonPropertiesRedisConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedisCommonPropertiesRedisConfiguration if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RedisCommonPropertiesRedisConfiguration.
     */
    public static RedisCommonPropertiesRedisConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedisCommonPropertiesRedisConfiguration deserializedRedisCommonPropertiesRedisConfiguration
                = new RedisCommonPropertiesRedisConfiguration();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rdb-backup-enabled".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.rdbBackupEnabled = reader.getString();
                } else if ("rdb-backup-frequency".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.rdbBackupFrequency = reader.getString();
                } else if ("rdb-backup-max-snapshot-count".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.rdbBackupMaxSnapshotCount = reader.getString();
                } else if ("rdb-storage-connection-string".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.rdbStorageConnectionString = reader.getString();
                } else if ("aof-backup-enabled".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.aofBackupEnabled = reader.getString();
                } else if ("aof-storage-connection-string-0".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.aofStorageConnectionString0
                        = reader.getString();
                } else if ("aof-storage-connection-string-1".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.aofStorageConnectionString1
                        = reader.getString();
                } else if ("maxfragmentationmemory-reserved".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.maxfragmentationmemoryReserved
                        = reader.getString();
                } else if ("maxmemory-policy".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.maxmemoryPolicy = reader.getString();
                } else if ("maxmemory-reserved".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.maxmemoryReserved = reader.getString();
                } else if ("maxmemory-delta".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.maxmemoryDelta = reader.getString();
                } else if ("maxclients".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.maxclients = reader.getString();
                } else if ("notify-keyspace-events".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.notifyKeyspaceEvents = reader.getString();
                } else if ("preferred-data-archive-auth-method".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.preferredDataArchiveAuthMethod
                        = reader.getString();
                } else if ("preferred-data-persistence-auth-method".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.preferredDataPersistenceAuthMethod
                        = reader.getString();
                } else if ("zonal-configuration".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.zonalConfiguration = reader.getString();
                } else if ("authnotrequired".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.authnotrequired = reader.getString();
                } else if ("storage-subscription-id".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.storageSubscriptionId = reader.getString();
                } else if ("aad-enabled".equals(fieldName)) {
                    deserializedRedisCommonPropertiesRedisConfiguration.aadEnabled = reader.getString();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedRedisCommonPropertiesRedisConfiguration.additionalProperties = additionalProperties;

            return deserializedRedisCommonPropertiesRedisConfiguration;
        });
    }
}
