// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rediscache.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Properties of upgrade notification.
 */
@Immutable
public final class UpgradeNotification implements JsonSerializable<UpgradeNotification> {
    /*
     * Name of upgrade notification.
     */
    private String name;

    /*
     * Timestamp when upgrade notification occurred.
     */
    private OffsetDateTime timestamp;

    /*
     * Details about this upgrade notification
     */
    private Map<String, String> upsellNotification;

    /**
     * Creates an instance of UpgradeNotification class.
     */
    public UpgradeNotification() {
    }

    /**
     * Get the name property: Name of upgrade notification.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Get the timestamp property: Timestamp when upgrade notification occurred.
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime getTimestamp() {
        return this.timestamp;
    }

    /**
     * Get the upsellNotification property: Details about this upgrade notification.
     * 
     * @return the upsellNotification value.
     */
    public Map<String, String> getUpsellNotification() {
        return this.upsellNotification;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpgradeNotification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpgradeNotification if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpgradeNotification.
     */
    public static UpgradeNotification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpgradeNotification deserializedUpgradeNotification = new UpgradeNotification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedUpgradeNotification.name = reader.getString();
                } else if ("timestamp".equals(fieldName)) {
                    deserializedUpgradeNotification.timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("upsellNotification".equals(fieldName)) {
                    Map<String, String> upsellNotification = reader.readMap(reader1 -> reader1.getString());
                    deserializedUpgradeNotification.upsellNotification = upsellNotification;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpgradeNotification;
        });
    }
}
