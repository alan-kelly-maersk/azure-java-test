// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rediscache.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response to force reboot for Redis cache.
 */
@Immutable
public final class RedisForceRebootResponse implements JsonSerializable<RedisForceRebootResponse> {
    /*
     * Status message
     */
    private String message;

    /**
     * Creates an instance of RedisForceRebootResponse class.
     */
    public RedisForceRebootResponse() {
    }

    /**
     * Get the message property: Status message.
     * 
     * @return the message value.
     */
    public String getMessage() {
        return this.message;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedisForceRebootResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedisForceRebootResponse if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RedisForceRebootResponse.
     */
    public static RedisForceRebootResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedisForceRebootResponse deserializedRedisForceRebootResponse = new RedisForceRebootResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("message".equals(fieldName)) {
                    deserializedRedisForceRebootResponse.message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRedisForceRebootResponse;
        });
    }
}
