// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rediscache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Parameters supplied to the Update Redis operation.
 */
@Fluent
public class RedisUpdateParameters implements JsonSerializable<RedisUpdateParameters> {
    /*
     * Resource tags.
     */
    private Map<String, String> tags;

    /*
     * The identity of the resource.
     */
    private ManagedServiceIdentity identity;

    /*
     * All Redis Settings. Few possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,
     * maxmemory-policy,notify-keyspace-events, aof-backup-enabled, aof-storage-connection-string-0,
     * aof-storage-connection-string-1 etc.
     */
    private RedisCommonPropertiesRedisConfiguration redisConfiguration;

    /*
     * Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which
     * refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value
     * is 'latest'.
     */
    private String redisVersion;

    /*
     * Specifies whether the non-ssl Redis server port (6379) is enabled.
     */
    private Boolean enableNonSslPort;

    /*
     * The number of replicas to be created per primary.
     */
    private Integer replicasPerMaster;

    /*
     * The number of replicas to be created per primary.
     */
    private Integer replicasPerPrimary;

    /*
     * A dictionary of tenant settings
     */
    private Map<String, String> tenantSettings;

    /*
     * The number of shards to be created on a Premium Cluster Cache.
     */
    private Integer shardCount;

    /*
     * Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
     */
    private TlsVersion minimumTlsVersion;

    /*
     * Whether or not public endpoint access is allowed for this cache. Value is optional but if passed in, must be
     * 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is
     * 'Enabled'
     */
    private PublicNetworkAccess publicNetworkAccess;

    /*
     * Optional: Specifies the update channel for the monthly Redis updates your Redis Cache will receive. Caches using
     * 'Preview' update channel get latest Redis updates at least 4 weeks ahead of 'Stable' channel caches. Default
     * value is 'Stable'.
     */
    private UpdateChannel updateChannel;

    /*
     * Authentication to Redis through access keys is disabled when set as true. Default value is false.
     */
    private Boolean disableAccessKeyAuthentication;

    /*
     * Optional: Specifies how availability zones are allocated to the Redis cache. 'Automatic' enables zone redundancy
     * and Azure will select zones based on regional availability and capacity. 'UserDefined' will select availability
     * zones passed in by you using the 'zones' parameter. 'NoZones' will produce a non-zonal cache. If
     * 'zonalAllocation' is not passed, it will be set to 'UserDefined' when zones are passed in, otherwise, will be set
     * to 'NoZones'
     */
    private ZonalAllocationPolicy zonalAllocationPolicy;

    /*
     * The SKU of the Redis cache to deploy.
     */
    private Sku sku;

    /**
     * Creates an instance of RedisUpdateParameters class.
     */
    public RedisUpdateParameters() {
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the RedisUpdateParameters object itself.
     */
    public RedisUpdateParameters setTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the identity property: The identity of the resource.
     * 
     * @return the identity value.
     */
    public ManagedServiceIdentity getIdentity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the resource.
     * 
     * @param identity the identity value to set.
     * @return the RedisUpdateParameters object itself.
     */
    public RedisUpdateParameters setIdentity(ManagedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the redisConfiguration property: All Redis Settings. Few possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,
     * maxmemory-policy,notify-keyspace-events, aof-backup-enabled, aof-storage-connection-string-0,
     * aof-storage-connection-string-1 etc.
     * 
     * @return the redisConfiguration value.
     */
    public RedisCommonPropertiesRedisConfiguration getRedisConfiguration() {
        return this.redisConfiguration;
    }

    /**
     * Set the redisConfiguration property: All Redis Settings. Few possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,
     * maxmemory-policy,notify-keyspace-events, aof-backup-enabled, aof-storage-connection-string-0,
     * aof-storage-connection-string-1 etc.
     * 
     * @param redisConfiguration the redisConfiguration value to set.
     * @return the RedisUpdateParameters object itself.
     */
    public RedisUpdateParameters setRedisConfiguration(RedisCommonPropertiesRedisConfiguration redisConfiguration) {
        this.redisConfiguration = redisConfiguration;
        return this;
    }

    /**
     * Get the redisVersion property: Redis version. This should be in the form 'major[.minor]' (only 'major' is
     * required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported
     * versions: 4.0, 6.0 (latest). Default value is 'latest'.
     * 
     * @return the redisVersion value.
     */
    public String getRedisVersion() {
        return this.redisVersion;
    }

    /**
     * Set the redisVersion property: Redis version. This should be in the form 'major[.minor]' (only 'major' is
     * required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported
     * versions: 4.0, 6.0 (latest). Default value is 'latest'.
     * 
     * @param redisVersion the redisVersion value to set.
     * @return the RedisUpdateParameters object itself.
     */
    public RedisUpdateParameters setRedisVersion(String redisVersion) {
        this.redisVersion = redisVersion;
        return this;
    }

    /**
     * Get the enableNonSslPort property: Specifies whether the non-ssl Redis server port (6379) is enabled.
     * 
     * @return the enableNonSslPort value.
     */
    public Boolean isEnableNonSslPort() {
        return this.enableNonSslPort;
    }

    /**
     * Set the enableNonSslPort property: Specifies whether the non-ssl Redis server port (6379) is enabled.
     * 
     * @param enableNonSslPort the enableNonSslPort value to set.
     * @return the RedisUpdateParameters object itself.
     */
    public RedisUpdateParameters setEnableNonSslPort(Boolean enableNonSslPort) {
        this.enableNonSslPort = enableNonSslPort;
        return this;
    }

    /**
     * Get the replicasPerMaster property: The number of replicas to be created per primary.
     * 
     * @return the replicasPerMaster value.
     */
    public Integer getReplicasPerMaster() {
        return this.replicasPerMaster;
    }

    /**
     * Set the replicasPerMaster property: The number of replicas to be created per primary.
     * 
     * @param replicasPerMaster the replicasPerMaster value to set.
     * @return the RedisUpdateParameters object itself.
     */
    public RedisUpdateParameters setReplicasPerMaster(Integer replicasPerMaster) {
        this.replicasPerMaster = replicasPerMaster;
        return this;
    }

    /**
     * Get the replicasPerPrimary property: The number of replicas to be created per primary.
     * 
     * @return the replicasPerPrimary value.
     */
    public Integer getReplicasPerPrimary() {
        return this.replicasPerPrimary;
    }

    /**
     * Set the replicasPerPrimary property: The number of replicas to be created per primary.
     * 
     * @param replicasPerPrimary the replicasPerPrimary value to set.
     * @return the RedisUpdateParameters object itself.
     */
    public RedisUpdateParameters setReplicasPerPrimary(Integer replicasPerPrimary) {
        this.replicasPerPrimary = replicasPerPrimary;
        return this;
    }

    /**
     * Get the tenantSettings property: A dictionary of tenant settings.
     * 
     * @return the tenantSettings value.
     */
    public Map<String, String> getTenantSettings() {
        return this.tenantSettings;
    }

    /**
     * Set the tenantSettings property: A dictionary of tenant settings.
     * 
     * @param tenantSettings the tenantSettings value to set.
     * @return the RedisUpdateParameters object itself.
     */
    public RedisUpdateParameters setTenantSettings(Map<String, String> tenantSettings) {
        this.tenantSettings = tenantSettings;
        return this;
    }

    /**
     * Get the shardCount property: The number of shards to be created on a Premium Cluster Cache.
     * 
     * @return the shardCount value.
     */
    public Integer getShardCount() {
        return this.shardCount;
    }

    /**
     * Set the shardCount property: The number of shards to be created on a Premium Cluster Cache.
     * 
     * @param shardCount the shardCount value to set.
     * @return the RedisUpdateParameters object itself.
     */
    public RedisUpdateParameters setShardCount(Integer shardCount) {
        this.shardCount = shardCount;
        return this;
    }

    /**
     * Get the minimumTlsVersion property: Optional: requires clients to use a specified TLS version (or higher) to
     * connect (e,g, '1.0', '1.1', '1.2').
     * 
     * @return the minimumTlsVersion value.
     */
    public TlsVersion getMinimumTlsVersion() {
        return this.minimumTlsVersion;
    }

    /**
     * Set the minimumTlsVersion property: Optional: requires clients to use a specified TLS version (or higher) to
     * connect (e,g, '1.0', '1.1', '1.2').
     * 
     * @param minimumTlsVersion the minimumTlsVersion value to set.
     * @return the RedisUpdateParameters object itself.
     */
    public RedisUpdateParameters setMinimumTlsVersion(TlsVersion minimumTlsVersion) {
        this.minimumTlsVersion = minimumTlsVersion;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: Whether or not public endpoint access is allowed for this cache. Value is
     * optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive
     * access method. Default value is 'Enabled'.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess getPublicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Whether or not public endpoint access is allowed for this cache. Value is
     * optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive
     * access method. Default value is 'Enabled'.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the RedisUpdateParameters object itself.
     */
    public RedisUpdateParameters setPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the updateChannel property: Optional: Specifies the update channel for the monthly Redis updates your Redis
     * Cache will receive. Caches using 'Preview' update channel get latest Redis updates at least 4 weeks ahead of
     * 'Stable' channel caches. Default value is 'Stable'.
     * 
     * @return the updateChannel value.
     */
    public UpdateChannel getUpdateChannel() {
        return this.updateChannel;
    }

    /**
     * Set the updateChannel property: Optional: Specifies the update channel for the monthly Redis updates your Redis
     * Cache will receive. Caches using 'Preview' update channel get latest Redis updates at least 4 weeks ahead of
     * 'Stable' channel caches. Default value is 'Stable'.
     * 
     * @param updateChannel the updateChannel value to set.
     * @return the RedisUpdateParameters object itself.
     */
    public RedisUpdateParameters setUpdateChannel(UpdateChannel updateChannel) {
        this.updateChannel = updateChannel;
        return this;
    }

    /**
     * Get the disableAccessKeyAuthentication property: Authentication to Redis through access keys is disabled when set
     * as true. Default value is false.
     * 
     * @return the disableAccessKeyAuthentication value.
     */
    public Boolean isDisableAccessKeyAuthentication() {
        return this.disableAccessKeyAuthentication;
    }

    /**
     * Set the disableAccessKeyAuthentication property: Authentication to Redis through access keys is disabled when set
     * as true. Default value is false.
     * 
     * @param disableAccessKeyAuthentication the disableAccessKeyAuthentication value to set.
     * @return the RedisUpdateParameters object itself.
     */
    public RedisUpdateParameters setDisableAccessKeyAuthentication(Boolean disableAccessKeyAuthentication) {
        this.disableAccessKeyAuthentication = disableAccessKeyAuthentication;
        return this;
    }

    /**
     * Get the zonalAllocationPolicy property: Optional: Specifies how availability zones are allocated to the Redis
     * cache. 'Automatic' enables zone redundancy and Azure will select zones based on regional availability and
     * capacity. 'UserDefined' will select availability zones passed in by you using the 'zones' parameter. 'NoZones'
     * will produce a non-zonal cache. If 'zonalAllocation' is not passed, it will be set to 'UserDefined' when zones
     * are passed in, otherwise, will be set to 'NoZones'.
     * 
     * @return the zonalAllocationPolicy value.
     */
    public ZonalAllocationPolicy getZonalAllocationPolicy() {
        return this.zonalAllocationPolicy;
    }

    /**
     * Set the zonalAllocationPolicy property: Optional: Specifies how availability zones are allocated to the Redis
     * cache. 'Automatic' enables zone redundancy and Azure will select zones based on regional availability and
     * capacity. 'UserDefined' will select availability zones passed in by you using the 'zones' parameter. 'NoZones'
     * will produce a non-zonal cache. If 'zonalAllocation' is not passed, it will be set to 'UserDefined' when zones
     * are passed in, otherwise, will be set to 'NoZones'.
     * 
     * @param zonalAllocationPolicy the zonalAllocationPolicy value to set.
     * @return the RedisUpdateParameters object itself.
     */
    public RedisUpdateParameters setZonalAllocationPolicy(ZonalAllocationPolicy zonalAllocationPolicy) {
        this.zonalAllocationPolicy = zonalAllocationPolicy;
        return this;
    }

    /**
     * Get the sku property: The SKU of the Redis cache to deploy.
     * 
     * @return the sku value.
     */
    public Sku getSku() {
        return this.sku;
    }

    /**
     * Set the sku property: The SKU of the Redis cache to deploy.
     * 
     * @param sku the sku value to set.
     * @return the RedisUpdateParameters object itself.
     */
    public RedisUpdateParameters setSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("identity", this.identity);
        if (redisConfiguration != null
            || redisVersion != null
            || enableNonSslPort != null
            || replicasPerMaster != null
            || replicasPerPrimary != null
            || tenantSettings != null
            || shardCount != null
            || minimumTlsVersion != null
            || publicNetworkAccess != null
            || updateChannel != null
            || disableAccessKeyAuthentication != null
            || zonalAllocationPolicy != null
            || sku != null) {
            jsonWriter.writeStartObject("properties");
            jsonWriter.writeJsonField("redisConfiguration", this.redisConfiguration);
            jsonWriter.writeStringField("redisVersion", this.redisVersion);
            jsonWriter.writeBooleanField("enableNonSslPort", this.enableNonSslPort);
            jsonWriter.writeNumberField("replicasPerMaster", this.replicasPerMaster);
            jsonWriter.writeNumberField("replicasPerPrimary", this.replicasPerPrimary);
            jsonWriter.writeMapField("tenantSettings", this.tenantSettings,
                (writer, element) -> writer.writeString(element));
            jsonWriter.writeNumberField("shardCount", this.shardCount);
            jsonWriter.writeStringField("minimumTlsVersion",
                this.minimumTlsVersion == null ? null : this.minimumTlsVersion.toString());
            jsonWriter.writeStringField("publicNetworkAccess",
                this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
            jsonWriter.writeStringField("updateChannel",
                this.updateChannel == null ? null : this.updateChannel.toString());
            jsonWriter.writeBooleanField("disableAccessKeyAuthentication", this.disableAccessKeyAuthentication);
            jsonWriter.writeStringField("zonalAllocationPolicy",
                this.zonalAllocationPolicy == null ? null : this.zonalAllocationPolicy.toString());
            jsonWriter.writeJsonField("sku", this.sku);
            jsonWriter.writeEndObject();
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedisUpdateParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedisUpdateParameters if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RedisUpdateParameters.
     */
    public static RedisUpdateParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedisUpdateParameters deserializedRedisUpdateParameters = new RedisUpdateParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedRedisUpdateParameters.tags = tags;
                } else if ("identity".equals(fieldName)) {
                    deserializedRedisUpdateParameters.identity = ManagedServiceIdentity.fromJson(reader);
                } else if ("properties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("redisConfiguration".equals(fieldName)) {
                            deserializedRedisUpdateParameters.redisConfiguration
                                = RedisCommonPropertiesRedisConfiguration.fromJson(reader);
                        } else if ("redisVersion".equals(fieldName)) {
                            deserializedRedisUpdateParameters.redisVersion = reader.getString();
                        } else if ("enableNonSslPort".equals(fieldName)) {
                            deserializedRedisUpdateParameters.enableNonSslPort
                                = reader.getNullable(JsonReader::getBoolean);
                        } else if ("replicasPerMaster".equals(fieldName)) {
                            deserializedRedisUpdateParameters.replicasPerMaster
                                = reader.getNullable(JsonReader::getInt);
                        } else if ("replicasPerPrimary".equals(fieldName)) {
                            deserializedRedisUpdateParameters.replicasPerPrimary
                                = reader.getNullable(JsonReader::getInt);
                        } else if ("tenantSettings".equals(fieldName)) {
                            Map<String, String> tenantSettings = reader.readMap(reader1 -> reader1.getString());
                            deserializedRedisUpdateParameters.tenantSettings = tenantSettings;
                        } else if ("shardCount".equals(fieldName)) {
                            deserializedRedisUpdateParameters.shardCount = reader.getNullable(JsonReader::getInt);
                        } else if ("minimumTlsVersion".equals(fieldName)) {
                            deserializedRedisUpdateParameters.minimumTlsVersion
                                = TlsVersion.fromString(reader.getString());
                        } else if ("publicNetworkAccess".equals(fieldName)) {
                            deserializedRedisUpdateParameters.publicNetworkAccess
                                = PublicNetworkAccess.fromString(reader.getString());
                        } else if ("updateChannel".equals(fieldName)) {
                            deserializedRedisUpdateParameters.updateChannel
                                = UpdateChannel.fromString(reader.getString());
                        } else if ("disableAccessKeyAuthentication".equals(fieldName)) {
                            deserializedRedisUpdateParameters.disableAccessKeyAuthentication
                                = reader.getNullable(JsonReader::getBoolean);
                        } else if ("zonalAllocationPolicy".equals(fieldName)) {
                            deserializedRedisUpdateParameters.zonalAllocationPolicy
                                = ZonalAllocationPolicy.fromString(reader.getString());
                        } else if ("sku".equals(fieldName)) {
                            deserializedRedisUpdateParameters.sku = Sku.fromJson(reader);
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRedisUpdateParameters;
        });
    }
}
