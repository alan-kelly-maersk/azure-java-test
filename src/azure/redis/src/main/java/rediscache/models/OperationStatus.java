// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rediscache.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * Asynchronous operation status.
 */
@Fluent
public final class OperationStatus extends OperationStatusResult {
    /*
     * Additional properties from RP, only when operation is successful
     */
    private Map<String, Object> properties;

    /**
     * Creates an instance of OperationStatus class.
     */
    public OperationStatus() {
    }

    /**
     * Get the properties property: Additional properties from RP, only when operation is successful.
     * 
     * @return the properties value.
     */
    public Map<String, Object> getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: Additional properties from RP, only when operation is successful.
     * 
     * @param properties the properties value to set.
     * @return the OperationStatus object itself.
     */
    public OperationStatus setProperties(Map<String, Object> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OperationStatus setId(String id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OperationStatus setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OperationStatus setStatus(String status) {
        super.setStatus(status);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OperationStatus setPercentComplete(Float percentComplete) {
        super.setPercentComplete(percentComplete);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OperationStatus setStartTime(OffsetDateTime startTime) {
        super.setStartTime(startTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OperationStatus setEndTime(OffsetDateTime endTime) {
        super.setEndTime(endTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OperationStatus setOperations(List<OperationStatusResult> operations) {
        super.setOperations(operations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OperationStatus setError(ErrorDetail error) {
        super.setError(error);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", getStatus());
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeNumberField("percentComplete", getPercentComplete());
        jsonWriter.writeStringField("startTime",
            getStartTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(getStartTime()));
        jsonWriter.writeStringField("endTime",
            getEndTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(getEndTime()));
        jsonWriter.writeArrayField("operations", getOperations(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("error", getError());
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OperationStatus.
     */
    public static OperationStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationStatus deserializedOperationStatus = new OperationStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedOperationStatus.setStatus(reader.getString());
                } else if ("id".equals(fieldName)) {
                    deserializedOperationStatus.setId(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedOperationStatus.setName(reader.getString());
                } else if ("percentComplete".equals(fieldName)) {
                    deserializedOperationStatus.setPercentComplete(reader.getNullable(JsonReader::getFloat));
                } else if ("startTime".equals(fieldName)) {
                    deserializedOperationStatus.setStartTime(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("endTime".equals(fieldName)) {
                    deserializedOperationStatus.setEndTime(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("operations".equals(fieldName)) {
                    List<OperationStatusResult> operations
                        = reader.readArray(reader1 -> OperationStatusResult.fromJson(reader1));
                    deserializedOperationStatus.setOperations(operations);
                } else if ("error".equals(fieldName)) {
                    deserializedOperationStatus.setError(ErrorDetail.fromJson(reader));
                } else if ("properties".equals(fieldName)) {
                    Map<String, Object> properties = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedOperationStatus.properties = properties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperationStatus;
        });
    }
}
