// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rediscache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of a linked server to be returned in get/put response.
 */
@Fluent
public final class RedisLinkedServerProperties extends RedisLinkedServerCreateProperties {
    /*
     * Terminal state of the link between primary and secondary redis cache.
     */
    private String provisioningState;

    /*
     * The changing DNS name that resolves to the current geo-primary cache among the linked redis caches before or
     * after the Geo Failover.
     */
    private String primaryHostName;

    /*
     * The unchanging DNS name which will always point to current geo-primary cache among the linked redis caches for
     * seamless Geo Failover experience.
     */
    private String geoReplicatedPrimaryHostName;

    /**
     * Creates an instance of RedisLinkedServerProperties class.
     */
    public RedisLinkedServerProperties() {
    }

    /**
     * Get the provisioningState property: Terminal state of the link between primary and secondary redis cache.
     * 
     * @return the provisioningState value.
     */
    public String getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the primaryHostName property: The changing DNS name that resolves to the current geo-primary cache among the
     * linked redis caches before or after the Geo Failover.
     * 
     * @return the primaryHostName value.
     */
    @Override
    public String getPrimaryHostName() {
        return this.primaryHostName;
    }

    /**
     * Get the geoReplicatedPrimaryHostName property: The unchanging DNS name which will always point to current
     * geo-primary cache among the linked redis caches for seamless Geo Failover experience.
     * 
     * @return the geoReplicatedPrimaryHostName value.
     */
    @Override
    public String getGeoReplicatedPrimaryHostName() {
        return this.geoReplicatedPrimaryHostName;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisLinkedServerProperties setLinkedRedisCacheId(String linkedRedisCacheId) {
        super.setLinkedRedisCacheId(linkedRedisCacheId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisLinkedServerProperties setLinkedRedisCacheLocation(String linkedRedisCacheLocation) {
        super.setLinkedRedisCacheLocation(linkedRedisCacheLocation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisLinkedServerProperties setServerRole(ReplicationRole serverRole) {
        super.setServerRole(serverRole);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("linkedRedisCacheId", getLinkedRedisCacheId());
        jsonWriter.writeStringField("linkedRedisCacheLocation", getLinkedRedisCacheLocation());
        jsonWriter.writeStringField("serverRole", getServerRole() == null ? null : getServerRole().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedisLinkedServerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedisLinkedServerProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RedisLinkedServerProperties.
     */
    public static RedisLinkedServerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedisLinkedServerProperties deserializedRedisLinkedServerProperties = new RedisLinkedServerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("linkedRedisCacheId".equals(fieldName)) {
                    deserializedRedisLinkedServerProperties.setLinkedRedisCacheId(reader.getString());
                } else if ("linkedRedisCacheLocation".equals(fieldName)) {
                    deserializedRedisLinkedServerProperties.setLinkedRedisCacheLocation(reader.getString());
                } else if ("serverRole".equals(fieldName)) {
                    deserializedRedisLinkedServerProperties
                        .setServerRole(ReplicationRole.fromString(reader.getString()));
                } else if ("geoReplicatedPrimaryHostName".equals(fieldName)) {
                    deserializedRedisLinkedServerProperties.geoReplicatedPrimaryHostName = reader.getString();
                } else if ("primaryHostName".equals(fieldName)) {
                    deserializedRedisLinkedServerProperties.primaryHostName = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedRedisLinkedServerProperties.provisioningState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRedisLinkedServerProperties;
        });
    }
}
