// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rediscache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The response of list patch schedules Redis operation.
 */
@Fluent
public final class RedisPatchScheduleListResult implements JsonSerializable<RedisPatchScheduleListResult> {
    /*
     * Results of the list patch schedules operation.
     */
    private List<RedisPatchSchedule> value;

    /*
     * Link for next page of results.
     */
    private String nextLink;

    /**
     * Creates an instance of RedisPatchScheduleListResult class.
     */
    public RedisPatchScheduleListResult() {
    }

    /**
     * Get the value property: Results of the list patch schedules operation.
     * 
     * @return the value value.
     */
    public List<RedisPatchSchedule> getValue() {
        return this.value;
    }

    /**
     * Set the value property: Results of the list patch schedules operation.
     * 
     * @param value the value value to set.
     * @return the RedisPatchScheduleListResult object itself.
     */
    public RedisPatchScheduleListResult setValue(List<RedisPatchSchedule> value) {
        this.value = value;
        return this;
    }

    /**
     * Get the nextLink property: Link for next page of results.
     * 
     * @return the nextLink value.
     */
    public String getNextLink() {
        return this.nextLink;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedisPatchScheduleListResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedisPatchScheduleListResult if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RedisPatchScheduleListResult.
     */
    public static RedisPatchScheduleListResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedisPatchScheduleListResult deserializedRedisPatchScheduleListResult = new RedisPatchScheduleListResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    List<RedisPatchSchedule> value = reader.readArray(reader1 -> RedisPatchSchedule.fromJson(reader1));
                    deserializedRedisPatchScheduleListResult.value = value;
                } else if ("nextLink".equals(fieldName)) {
                    deserializedRedisPatchScheduleListResult.nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRedisPatchScheduleListResult;
        });
    }
}
