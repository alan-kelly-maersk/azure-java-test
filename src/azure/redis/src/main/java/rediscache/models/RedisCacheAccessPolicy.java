// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rediscache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response to get/put access policy.
 */
@Fluent
public class RedisCacheAccessPolicy extends ProxyResource {
    /*
     * Provisioning state of access policy
     */
    private AccessPolicyProvisioningState provisioningState;

    /*
     * Built-In or Custom access policy
     */
    private AccessPolicyType typePropertiesType;

    /*
     * Permissions for the access policy. Learn how to configure permissions at https://aka.ms/redis/AADPreRequisites
     */
    private String permissions;

    /*
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    private String type;

    /*
     * The name of the resource
     */
    private String name;

    /*
     * Fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{
     * resourceType}/{resourceName}
     */
    private String id;

    /**
     * Creates an instance of RedisCacheAccessPolicy class.
     */
    public RedisCacheAccessPolicy() {
    }

    /**
     * Get the provisioningState property: Provisioning state of access policy.
     * 
     * @return the provisioningState value.
     */
    public AccessPolicyProvisioningState getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the typePropertiesType property: Built-In or Custom access policy.
     * 
     * @return the typePropertiesType value.
     */
    public AccessPolicyType getTypePropertiesType() {
        return this.typePropertiesType;
    }

    /**
     * Get the permissions property: Permissions for the access policy. Learn how to configure permissions at
     * https://aka.ms/redis/AADPreRequisites.
     * 
     * @return the permissions value.
     */
    public String getPermissions() {
        return this.permissions;
    }

    /**
     * Set the permissions property: Permissions for the access policy. Learn how to configure permissions at
     * https://aka.ms/redis/AADPreRequisites.
     * 
     * @param permissions the permissions value to set.
     * @return the RedisCacheAccessPolicy object itself.
     */
    public RedisCacheAccessPolicy setPermissions(String permissions) {
        this.permissions = permissions;
        return this;
    }

    /**
     * Get the type property: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     * "Microsoft.Storage/storageAccounts".
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
     * 
     * @return the id value.
     */
    @Override
    public String getId() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (provisioningState != null || typePropertiesType != null || permissions != null) {
            jsonWriter.writeStartObject("properties");
            jsonWriter.writeStringField("permissions", this.permissions);
            jsonWriter.writeEndObject();
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedisCacheAccessPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedisCacheAccessPolicy if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RedisCacheAccessPolicy.
     */
    public static RedisCacheAccessPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedisCacheAccessPolicy deserializedRedisCacheAccessPolicy = new RedisCacheAccessPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedRedisCacheAccessPolicy.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedRedisCacheAccessPolicy.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedRedisCacheAccessPolicy.type = reader.getString();
                } else if ("properties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("provisioningState".equals(fieldName)) {
                            deserializedRedisCacheAccessPolicy.provisioningState
                                = AccessPolicyProvisioningState.fromString(reader.getString());
                        } else if ("type".equals(fieldName)) {
                            deserializedRedisCacheAccessPolicy.typePropertiesType
                                = AccessPolicyType.fromString(reader.getString());
                        } else if ("permissions".equals(fieldName)) {
                            deserializedRedisCacheAccessPolicy.permissions = reader.getString();
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRedisCacheAccessPolicy;
        });
    }
}
