// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rediscache;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;

/**
 * A builder for creating a new instance of the RedisCacheClient type.
 */
@ServiceClientBuilder(serviceClients = { RedisCacheClient.class })
public final class RedisCacheClientBuilder {
    /*
     * The ID of the target subscription.
     */
    @Generated
    private String subscriptionId;

    /**
     * Sets The ID of the target subscription.
     * 
     * @param subscriptionId the subscriptionId value.
     * @return the RedisCacheClientBuilder.
     */
    @Generated
    public RedisCacheClientBuilder subscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /*
     * server parameter
     */
    @Generated
    private String host;

    /**
     * Sets server parameter.
     * 
     * @param host the host value.
     * @return the RedisCacheClientBuilder.
     */
    @Generated
    public RedisCacheClientBuilder host(String host) {
        this.host = host;
        return this;
    }

    /*
     * Api Version
     */
    @Generated
    private String apiVersion;

    /**
     * Sets Api Version.
     * 
     * @param apiVersion the apiVersion value.
     * @return the RedisCacheClientBuilder.
     */
    @Generated
    public RedisCacheClientBuilder apiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    /*
     * The environment to connect to
     */
    @Generated
    private AzureEnvironment environment;

    /**
     * Sets The environment to connect to.
     * 
     * @param environment the environment value.
     * @return the RedisCacheClientBuilder.
     */
    @Generated
    public RedisCacheClientBuilder environment(AzureEnvironment environment) {
        this.environment = environment;
        return this;
    }

    /*
     * The HTTP pipeline to send requests through
     */
    @Generated
    private HttpPipeline pipeline;

    /**
     * Sets The HTTP pipeline to send requests through.
     * 
     * @param pipeline the pipeline value.
     * @return the RedisCacheClientBuilder.
     */
    @Generated
    public RedisCacheClientBuilder pipeline(HttpPipeline pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The serializer to serialize an object into a string
     */
    @Generated
    private SerializerAdapter serializerAdapter;

    /**
     * Sets The serializer to serialize an object into a string.
     * 
     * @param serializerAdapter the serializerAdapter value.
     * @return the RedisCacheClientBuilder.
     */
    @Generated
    public RedisCacheClientBuilder serializerAdapter(SerializerAdapter serializerAdapter) {
        this.serializerAdapter = serializerAdapter;
        return this;
    }

    /**
     * Builds an instance of RedisCacheClient with the provided parameters.
     * 
     * @return an instance of RedisCacheClient.
     */
    @Generated
    public RedisCacheClient buildClient() {
        String localHost = (host != null) ? host : "https://management.azure.com";
        String localApiVersion = (apiVersion != null) ? apiVersion : "2024-04-01-preview";
        AzureEnvironment localEnvironment = (environment != null) ? environment : AzureEnvironment.AZURE;
        HttpPipeline localPipeline = (pipeline != null)
            ? pipeline
            : new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build();
        SerializerAdapter localSerializerAdapter
            = (serializerAdapter != null) ? serializerAdapter : JacksonAdapter.createDefaultSerializerAdapter();
        RedisCacheClient client = new RedisCacheClient(localPipeline, localSerializerAdapter, this.subscriptionId,
            localHost, localApiVersion);
        return client;
    }
}
